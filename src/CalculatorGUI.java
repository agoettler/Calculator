
/*
 * Introduction to Software Design Fall 2014
 * Author: Andrew Goettler
 * Problem: 14.9 Calculator (p. 626)
 * Problem description: Create a calculator GUI as shown on p. 626
 * 		and implement the functionality as indicated
 * 		in the homework grid.
 */

// import needed libraries

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JButton;
import java.awt.GridLayout;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class CalculatorGUI extends JFrame
{
	/**
	 * 
	 */
	// this corrects the "serializable" warning
	private static final long serialVersionUID = 1395282873885077564L;

	private CalculatorOPS calculatorOP;
	
	private JPanel buttonPanel; // panel for the calculator buttons
	private JPanel displayPanel; // panel for the calculator display
	
	private JButton[] buttons; // array of buttons for the calculator
	private static final String[] buttonNames = 
		{"7" , "8" , "9" , "/" ,
		 "4" , "5" , "6" , "*" ,
		 "1" , "2" , "3" , "-" ,
		 "0" , "." , "=" , "+" }; // array of button symbols
	
	private JTextField display; // text field to act as the calculator's display
	
	
	
	/**
	 * This constructor creates a new calculatorGUI object. A CalculatorOPS
	 * object is required at instantiation to perform the calculation
	 * operations.
	 * 
	 * @param incomingCalculatorOP
	 */
	// the CalculatorOPS object must be "bound" to the CalculatorGUI object by
	// being passed to the constructor
	public CalculatorGUI(CalculatorOPS incomingCalculatorOP)
	{
		// call the superclass constructor
		super("Calculator Graphics");
		
		// set the private CalculatorOPS reference to the provided object
		calculatorOP = incomingCalculatorOP;
		
		// call the displayPanelCreator and buttonPanelCreator helper methods
		displayPanelCreator();
		buttonPanelCreator();
		
		// add the displayPanel and buttonPanel to the frame
		add(displayPanel, BorderLayout.NORTH);
		add(buttonPanel, BorderLayout.CENTER);
	}
	
	/**
	 * This is an internal helper method which creates the displayPanel
	 * for the CalculatorGUI constructor.
	 */
	// internal helper for creating and adding the JTextField object to displayPanel
	private void displayPanelCreator()
	{
		displayPanel = new JPanel();
		
		display = new JTextField();
		// TODO find a way to resize the text field with the window
		display.setColumns(20);
		display.setHorizontalAlignment(JTextField.TRAILING);
		display.setEditable(false); // prevent the user from entering text into the field
		displayPanel.add(display); // add the field to the panel
	}
	
	/**
	 * This is an internal helper method which creates the buttonPanel
	 * for the CalculatorGUI constructor.
	 */
	//  internal helper method for creating and adding JButton objects to buttonPanel
	private void buttonPanelCreator()
	{
		buttons = new JButton[buttonNames.length];
		
		buttonPanel = new JPanel();
		buttonPanel.setLayout(new GridLayout(4,4));
		
		CalculatorButtonHandler buttonHandler = new CalculatorButtonHandler();
		
		// add the buttons to the panel
		for(int counter = 0; counter < buttons.length; counter++)
		{
			buttons[counter] = new JButton(buttonNames[counter]);
			buttons[counter].addActionListener(buttonHandler);
			buttonPanel.add(buttons[counter]);
		}
	}
	
	// inner class for button event handling
	private class CalculatorButtonHandler implements ActionListener
	{
		/**
		 * This is the event handler for the buttonEvents generated by the 
		 * CalculatorGUI. The name of the buttonEvent is passed directly 
		 * to the CalculatorOPS object for processing.
		 */
		public void actionPerformed(ActionEvent buttonEvent)
		{
			//display.setText("Button " + buttonEvent.getActionCommand() + " pressed.");
			display.setText(calculatorOP.calculate(buttonEvent.getActionCommand()));
		}
	}
}
